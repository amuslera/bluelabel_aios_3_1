#!/usr/bin/env python3
"""
Visual demo showing agents interacting in the terminal.
Watch agents communicate through file-based messaging!
"""
import sys
import time
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, Any

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from experiments.simple_agents.agents.base_agent import SimpleAgent
from experiments.simple_agents.agents.apollo_simple import ApolloSimple
from experiments.simple_agents.communication.message_bus import SimpleMessageBus

# ANSI color codes for pretty terminal output
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_header(text: str):
    print(f"\n{Colors.HEADER}{Colors.BOLD}{'=' * 60}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{text.center(60)}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{'=' * 60}{Colors.ENDC}\n")

def print_agent_action(agent_name: str, action: str, details: str = ""):
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"{Colors.CYAN}[{timestamp}] {Colors.BOLD}{agent_name}:{Colors.ENDC} {action}")
    if details:
        print(f"{Colors.CYAN}          → {details}{Colors.ENDC}")

def print_message_flow(from_entity: str, to_entity: str, message_type: str):
    print(f"\n{Colors.YELLOW}  {from_entity} ─────[{message_type}]────→ {to_entity}{Colors.ENDC}\n")

def print_file_created(filepath: str):
    print(f"{Colors.GREEN}  📄 File created: {filepath}{Colors.ENDC}")

def show_message_bus_state(message_bus: SimpleMessageBus, agents: list):
    """Show the current state of all message inboxes."""
    print(f"\n{Colors.BLUE}📬 Message Bus Status:{Colors.ENDC}")
    for agent in agents:
        messages = message_bus.read_inbox(agent)
        if messages:
            print(f"  {agent}: {len(messages)} pending messages")
            for msg in messages[:2]:  # Show first 2
                print(f"    - {msg['type']} from {msg.get('from', 'unknown')}")
        else:
            print(f"  {agent}: Inbox empty")

class AphroditeSimple(SimpleAgent):
    """Simple frontend agent for demo."""
    
    def __init__(self, workspace_dir: str = "workspace"):
        super().__init__("Aphrodite", "Frontend Developer", workspace_dir)
        self.code_dir = self.workspace / "code" / "frontend"
        self.code_dir.mkdir(parents=True, exist_ok=True)
    
    def process_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """Process frontend tasks."""
        # Simulate work
        component_code = f"""// Dashboard Component
// Generated by Aphrodite

import React from 'react';

const Dashboard = () => {{
  return (
    <div className="dashboard">
      <h1>Data Dashboard</h1>
      <p>Frontend created by Aphrodite</p>
    </div>
  );
}};

export default Dashboard;"""
        
        component_file = self.code_dir / "Dashboard.jsx"
        component_file.write_text(component_code)
        
        return {
            "status": "completed",
            "output": "Created React dashboard component",
            "files_created": [str(component_file)]
        }

def demo_agent_interaction():
    """Demonstrate agents interacting through messages."""
    workspace = Path("experiments/simple_agents/workspace")
    workspace.mkdir(exist_ok=True)
    
    # Create message bus
    message_bus = SimpleMessageBus(str(workspace))
    message_bus.clear_all_messages()  # Start fresh
    
    # Create agents
    apollo = ApolloSimple(str(workspace))
    aphrodite = AphroditeSimple(str(workspace))
    
    print_header("Simple Agent Interaction Demo")
    
    print("🤖 Agents Online:")
    print(f"  - {Colors.BOLD}Apollo{Colors.ENDC} (Backend Developer)")
    print(f"  - {Colors.BOLD}Aphrodite{Colors.ENDC} (Frontend Developer)")
    
    # Show initial state
    show_message_bus_state(message_bus, ["Apollo", "Aphrodite"])
    
    # Step 1: Orchestrator sends task to Apollo
    print_header("Step 1: Task Assignment")
    
    task = {
        "id": "task_001",
        "type": "implement_logic",
        "description": "Create dashboard with user interface",
        "service_name": "Dashboard"
    }
    
    message = {
        "type": "task",
        "task": task,
        "from": "Orchestrator"
    }
    
    print_agent_action("Orchestrator", "Creating task", task["description"])
    time.sleep(1)
    
    print_message_flow("Orchestrator", "Apollo", "task")
    message_bus.send_message("Apollo", message)
    
    show_message_bus_state(message_bus, ["Apollo", "Aphrodite"])
    time.sleep(2)
    
    # Step 2: Apollo processes the message
    print_header("Step 2: Apollo Processes Task")
    
    # Apollo reads message
    apollo_msg = message_bus.get_next_message("Apollo")
    print_agent_action("Apollo", "Reading message", f"Type: {apollo_msg['type']}")
    time.sleep(1)
    
    # Apollo processes
    print_agent_action("Apollo", "Processing task", "Analyzing requirements...")
    response = apollo.receive_message(apollo_msg)
    message_bus.mark_processed("Apollo", apollo_msg["id"])
    
    # Apollo realizes it needs frontend help
    if response.get("result", {}).get("status") == "handoff":
        print_agent_action("Apollo", "Backend complete", "Need frontend assistance")
        time.sleep(1)
        
        # Apollo creates handoff
        handoff = response.get("result", {}).get("handoff_message")
        print_message_flow("Apollo", "Aphrodite", "handoff")
        
        # Send handoff through message bus
        message_bus.send_message("Aphrodite", handoff)
        
        show_message_bus_state(message_bus, ["Apollo", "Aphrodite"])
        time.sleep(2)
    
    # Step 3: Aphrodite handles the handoff
    print_header("Step 3: Aphrodite Takes Over")
    
    # Aphrodite reads handoff
    aphrodite_msg = message_bus.get_next_message("Aphrodite")
    print_agent_action("Aphrodite", "Reading handoff", f"From: {aphrodite_msg['from_agent']}")
    time.sleep(1)
    
    # Process handoff
    handoff_response = aphrodite.receive_message(aphrodite_msg)
    message_bus.mark_processed("Aphrodite", aphrodite_msg["id"])
    
    print_agent_action("Aphrodite", "Acknowledged handoff", "Ready to create frontend")
    time.sleep(1)
    
    # Aphrodite works on frontend
    print_agent_action("Aphrodite", "Creating React components", "Building dashboard UI...")
    time.sleep(2)
    
    # Process the original task
    frontend_result = aphrodite.process_task(task)
    
    for file in frontend_result.get("files_created", []):
        print_file_created(file)
    
    # Final status
    print_header("Final Status")
    
    print("✅ Workflow Complete!")
    print(f"\n📁 Files created:")
    
    # List all created files
    import os
    for root, dirs, files in os.walk(workspace):
        for file in files:
            if file.endswith(('.py', '.jsx', '.js')):
                filepath = Path(root) / file
                rel_path = filepath.relative_to(workspace)
                print(f"  - {rel_path}")
    
    print(f"\n💬 Total messages processed: 2")
    print(f"🤝 Successful handoff: Apollo → Aphrodite")

def demo_how_it_works():
    """Explain how the system works."""
    print_header("How Simple Agents Work")
    
    print("📋 CONCEPT:")
    print("  Agents communicate by writing JSON files to each other's inboxes")
    print("  No complex infrastructure needed!\n")
    
    print("🔄 WORKFLOW:")
    print("  1. Orchestrator writes task → apollo_inbox.json")
    print("  2. Apollo reads inbox, processes task")
    print("  3. Apollo writes handoff → aphrodite_inbox.json")
    print("  4. Aphrodite reads inbox, continues work")
    print("  5. Messages move to archive when processed\n")
    
    print("📁 FILE STRUCTURE:")
    print("  workspace/")
    print("  ├── messages/")
    print("  │   ├── apollo_inbox.json      # Pending messages")
    print("  │   ├── aphrodite_inbox.json   # Pending messages")
    print("  │   └── archive/               # Processed messages")
    print("  ├── code/")
    print("  │   ├── backend/               # Apollo's output")
    print("  │   └── frontend/              # Aphrodite's output")
    print("  └── state/")
    print("      └── agent_states.json     # Agent memory\n")
    
    print("🎯 KEY INSIGHT:")
    print("  This proves multi-agent patterns work without RabbitMQ,")
    print("  Redis, or any complex infrastructure!")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Visual agent interaction demo")
    parser.add_argument("--explain", "-e", action="store_true",
                       help="Explain how it works")
    
    args = parser.parse_args()
    
    if args.explain:
        demo_how_it_works()
    else:
        demo_agent_interaction()
        print("\n💡 Run with --explain flag to see how it works")